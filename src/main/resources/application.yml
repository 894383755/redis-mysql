#spring:
#  profiles:
#    active: common
server:
  port: 8081
#grpc:
#  server:
#    port: 6669

config:
  rediskey: HeNan_
  #rediskey: FJ_
  #rediskey: XiNan_


jdbc:
  ### -----------达梦-------------------
  #url: jdbc:dm://192.100.132.39:12345/OMPSE
  url: jdbc:dm://192.100.1.82:12345/OMPSE_XINAN
  #url: jdbc:dm://192.100.1.82:12345/OMPSE_HN
  ##url: jdbc:dm://41.10.84.183:12345/OMPSE
  ##url: jdbc:dm://100.10.100.19:12345/OMPSE
  ##url: jdbc:dm://10.12.3.200:12345/OMPSE

  driverClass: dm.jdbc.driver.DmDriver
  username: SYSDBA
  password: SYSDBA

  ### -----------金仓-------------------
  #url: jdbc:kingbase://123.56.70.34:54321/OMPSE

  #driverClass: com.kingbase.Driver
  #username: SYSTEM
  #password: SYSTEM

  ### -----------mysql-----------------
#  url: jdbc:mysql://10.35.8.35:8066/FUJIAN?useUnicode： true
#  driverClass: com.mysql.jdbc.Driver
#  username: SYSDBA
#  password: SYSDBA

  ### ----------池---------------------
  initialSize: 1
  minIdle: 1
  maxActive: 20
  maxWait: 30000
  timeBetweenEvictionRunsMillis: 6000
  minEvictableIdleTimeMillis: 30000
  testWhileIdle: true
  testOnBorrow: true
  testOnReturn: true
  poolPreparedStatements: true
  maxPoolPreparedStatementPerConnectionSize: 100
  validationQuery: select 1
  filters: stat

redis:
  #选择使用是单机redis还是集群codis  1、单机redis 2、集群codis
  redis.type: 2
  #<!--设置单节点 -->
  redis.host: 123.56.70.34
  redis.port: 6379
  #codis连接
  #密码
  auth: 123456
  #注册中心地址
  #<!--设置单节点 -->
  #nodes: 192.100.1.107:6379,
  #nodes: 100.10.101.70:7000,100.10.101.70:7001,100.10.101.71:7000,100.10.101.71:7001,100.10.101.72:7000,100.10.101.72:7001
  #nodes: 41.10.84.180:7000,41.10.84.180:7001,41.10.84.181:7000,41.10.84.181:7001,41.10.84.182:7000,41.10.84.182:7001
  nodes: 192.100.1.106:7000,192.100.1.106:7001,192.100.1.107:7000,192.100.1.107:7001,192.100.1.110:7000,192.100.1.110:7001
  #nodes: 123.56.70.34:6379
  #集群名称/在注册中心的路径
  zkDir: /jodis/codis-tsd
  #zkDir: /zk/codis/db_codis-tsd/proxy
  maxRedirects: 3
  #最大空闲连接数
  maxIdle: 30
  #最小空闲连接数
  minIdle: 10
  #最大连接数
  maxTotal: 200
  #获取连接时最大等待毫秒数,如果该值小于0,则阻塞不确定的时长,默认值-1
  maxWaitMillis: -1
  #在获取连接时检查连接有效性,默认为false
  testOnBorrow: true
  #
  testOnReturn: true
  #在连接空闲时检查连接有效性,默认为false
  testWhileIdle: true
  #释放连接的扫描间隔(单位:毫秒)
  timeBetweenEvictionRunsMillis: 30000
  #连接最小空闲时间(单位:毫秒)
  minEvictableIdleTimeMillis: 100000
  #每次释放连接的最大数目
  numTestsPerEvictionRun: 1024
  #连接空闲多久后释放,当空闲时间大于该值并且空闲连接大于最大空闲连接时直接释放连接
  softMinEvictableIdleTimeMillis: 10000
  #连接耗尽是否阻塞,false代表抛异常,true代表阻塞直到超时,默认为true
  blockWhenExhausted: false
  #设置连接超时时间
  connectionTimeout: 0
  #设置网络通信超时时间
  soTimeout: 2000
  #设置最大重试次数
  maxAttempts: 5

kafka:
  #天津
  #kafkaservice: 192.100.1.30:9092,192.100.1.31:9092,192.100.1.32:9092
  #西南
  kafkaservice: 192.100.1.71:9092,192.100.1.74:9092,192.100.1.77:9092
  #kafkaservice: 100.10.101.73:9092,100.10.101.74:9092,100.10.101.75:9092
  #kafkaservice: 192.100.1.15:9092,192.100.1.100:9092,192.100.1.103:9092
  #河南
  #kafkaservice: 41.10.84.180:9092,41.10.84.181:9092,41.10.84.182:9092
  groupIdStaticModel: CID_aue_sms
  #告警同步
  groupIdSynchro: CID_mre_sms
  groupIdNotice: CID_notice_sms
  #静态数据触发更新
  groupIdSynchroData: CID_data_sms
  enable_auto_commit: true
  max_poll_records: 10
  queue_length: 2000000
  earliest: earliest
  topicStaticModel: kafkatransfer_aue_sms
  #告警同步
  topicSynchro: mysql_redis_sms
  topicNotice: kafkatransfer_notice_sms
  #静态数据触发更新
  topicSynchroData: kafkatransfer_data_sms