#选择使用是单机redis还是集群codis  1、单机redis 2、集群codis
redis.type=2
#<!--设置单节点 -->
redis.host=123.56.70.34
redis.port=6379
#codis连接
#密码
auth=123456
#注册中心地址
#<!--设置单节点 -->
#zkAddr=192.100.1.107:6379,
#zkAddr=100.10.101.70:7000,100.10.101.70:7001,100.10.101.71:7000,100.10.101.71:7001,100.10.101.72:7000,100.10.101.72:7001
#zkAddr=41.10.84.180:7000,41.10.84.180:7001,41.10.84.181:7000,41.10.84.181:7001,41.10.84.182:7000,41.10.84.182:7001
#zkAddr=192.100.1.106:7000,192.100.1.106:7001,192.100.1.107:7000,192.100.1.107:7001,192.100.1.110:7000,192.100.1.110:7001
zkAddr=123.56.70.34:6379
#集群名称/在注册中心的路径
zkDir=/jodis/codis-tsd
#zkDir=/zk/codis/db_codis-tsd/proxy
#
redis.maxRedirects=3
#最大空闲连接数
redis.maxIdle=30
#最小空闲连接数
redis.minIdle=10
#最大连接数 
redis.maxTotal=200
#获取连接时最大等待毫秒数,如果该值小于0,则阻塞不确定的时长,默认值-1
redis.maxWaitMillis=-1
#在获取连接时检查连接有效性,默认为false
redis.testOnBorrow=true
#
redis.testOnReturn=true
#在连接空闲时检查连接有效性,默认为false
redis.testWhileIdle=true
#释放连接的扫描间隔(单位:毫秒)
redis.timeBetweenEvictionRunsMillis=30000
#连接最小空闲时间(单位:毫秒)
redis.minEvictableIdleTimeMillis=100000
#每次释放连接的最大数目
redis.numTestsPerEvictionRun=1024
#连接空闲多久后释放,当空闲时间大于该值并且空闲连接大于最大空闲连接时直接释放连接
redis.softMinEvictableIdleTimeMillis=10000
#连接耗尽是否阻塞,false代表抛异常,true代表阻塞直到超时,默认为true
redis.blockWhenExhausted=false
#设置连接超时时间
redis.connectionTimeout=0
#设置网络通信超时时间 
redis.soTimeout=2000
#设置最大重试次数
redis.maxAttempts=5